// Generated by CoffeeScript 1.6.2
(function() {
  var animateCircleGrowth, animateMarker, buildLabel, center, createEmptyTimeline, createMomentAtTimeline, createTimelineContainer, createTimelineWithMoments, drawInMarkers, drawTimelineOriginCircle, drawTimelineSpine, getContainer, getNextId, getUtils, insertMomentsIntoTimeline, makeCircle, makeMarker, monthNumToName, parseDate, printCurrentContainerData, produceIntervals, runTests, setContainerData, shootMarkerByDate;

  setContainerData = function(container, start, end, markerLeftBuffer) {
    return container.data({
      utils: {
        startDate: start,
        endDate: end,
        markerLeftBuffer: markerLeftBuffer,
        dateToMarkerNo: function(d) {
          return Math.floor((d - this.startDate) / (1000 * 60 * 60 * 24));
        },
        noOfIntervals: function() {
          return 1 + this.dateToMarkerNo(this.endDate);
        },
        dateToMarkerLeft: function(d) {
          return (this.markerLeftBuffer + this.pctPerInterval() * (this.dateToMarkerNo(d))) + '%';
        },
        pctPerInterval: function() {
          return (100 - this.markerLeftBuffer) / this.noOfIntervals();
        },
        toString: function() {
          return "Start : " + this.startDate + " 				\nEnd : " + this.endDate + "  				\nMarkers left buffer : " + this.markerLeftBuffer + " 				\nNo Of Intervals : " + (this.noOfIntervals()) + "  				\nPercent per Interval : " + (this.pctPerInterval().toFixed(3));
        }
      }
    });
  };

  produceIntervals = function(start, end, interval) {
    var int, result, setPriority, _i, _j, _len, _len1;
    start = parseDate(start);
    alert(start);
    alert(start.getDay());
    end = parseDate(end);
    result = [];
    while (start <= end) {
      result.push({
        date: start.getDate(),
        day: start.getDay(),
        month: start.getMonth(),
        year: 1900 + start.getYear(),
        toString: function() {
          return this.date + '/' + this.month + '/' + this.year + ' day is ' + this.day;
        }
      });
      start.setDate(start.getDate() + 1);
    }
    setPriority = function(interval) {
      if (interval['date'] === 1) {
        return interval['priority'] = 3;
      } else if (interval['day'] === 1) {
        return interval['priority'] = 2;
      } else {
        return interval['priority'] = 1;
      }
    };
    for (_i = 0, _len = result.length; _i < _len; _i++) {
      int = result[_i];
      console.log(int.toString());
    }
    for (_j = 0, _len1 = result.length; _j < _len1; _j++) {
      interval = result[_j];
      setPriority(interval);
    }
    return result;
  };

  getContainer = function(spine) {
    return spine.parent();
  };

  getUtils = function(container) {
    return container.data('utils');
  };

  getNextId = function() {
    return 'timeline_' + $('.timeline').length + 1;
  };

  parseDate = function(input) {
    var parts;
    parts = input.match(/(\d+)/g);
    return new Date(parts[0], parts[1] - 1, parts[2]);
  };

  monthNumToName = function(m) {
    return "Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Aug,Nov,Dec".split(',')[m];
  };

  createTimelineContainer = function(userContainer) {
    var timelineContainer;
    userContainer.append(timelineContainer = $(document.createElement('div')));
    timelineContainer.attr({
      'id': getNextId(),
      'class': 'timelineContainer'
    }).css({
      'position': 'absolute',
      'height': '150px',
      'width': '100%',
      'backgroundColor': 'white'
    });
    return timelineContainer;
  };

  makeCircle = function(r, c) {
    var circle;
    return center(circle = $(document.createElement('div')).css({
      background: c,
      height: r + 'px',
      width: r + 'px',
      '-moz-border-radius': r + 'px',
      '-webkit-border-radius': r + 'px',
      position: 'absolute'
    }));
  };

  center = function(c) {
    return c.css({
      'margin-top': -c.height() / 2 + 'px',
      'margin-left': -c.width() / 2 + 'px'
    });
  };

  animateCircleGrowth = function(c, rGoal, speed) {
    return c.animate({
      'height': rGoal + 'px',
      'width': rGoal + 'px',
      '-moz-border-radius': rGoal + 'px',
      '-webkit-border-radius': rGoal + 'px',
      'margin-top': -rGoal / 2 + 'px',
      'margin-left': -rGoal / 2 + 'px'
    }, {
      duration: speed
    });
  };

  drawTimelineSpine = function(timelineContainer) {
    var leftBuffer, rightBuffer, tlSpine;
    leftBuffer = 7;
    rightBuffer = 3;
    tlSpine = $(document.createElement('div')).data({
      'leftBuffer': leftBuffer,
      'rightBuffer': rightBuffer
    });
    timelineContainer.append(tlSpine);
    tlSpine.attr({
      'class': 'spine'
    }).css({
      'position': 'absolute',
      'width': '0%',
      'height': '1px',
      'margin-top': '50%',
      'margin-left': leftBuffer + '%',
      'margin-right': rightBuffer + '%',
      'backgroundColor': 'black'
    }).animate({
      width: 100 - (rightBuffer + leftBuffer) + '%'
    }, {
      duration: 1000
    });
    return tlSpine;
  };

  drawTimelineOriginCircle = function(spine) {
    var container;
    container = getContainer(spine);
    container.append(makeCircle(12, 'black').addClass('originCircle').css({
      'opacity': 0,
      'top': '50%',
      'left': spine.data('leftBuffer') + '%'
    }));
    return container.find('.originCircle').animate({
      'opacity': 1
    }, {
      duration: '300',
      easing: 'easeInBounce'
    });
  };

  makeMarker = function(properties) {
    var h, w;
    h = properties['h'];
    w = properties['w'];
    return $(document.createElement('div')).css({
      position: 'absolute',
      top: 0,
      marginTop: 0,
      'margin-left': -w / 2,
      height: 0,
      width: w,
      backgroundColor: properties['c']
    }).data('finalHeight', h);
  };

  animateMarker = function(m) {
    var finalHeight;
    finalHeight = m.data('finalHeight');
    return m.delay(1200).animate({
      height: finalHeight,
      marginTop: -finalHeight / 2
    }, {
      duration: 300
    });
  };

  buildLabel = function(int) {
    var lbl, txt;
    lbl = $(document.createElement('div')).css({
      marginTop: -14,
      width: 40,
      marginLeft: -20,
      textAlign: 'center',
      height: 'auto',
      fontFamily: 'Arial',
      fontSize: '7px',
      position: 'absolute'
    });
    txt = '';
    switch (int.priority) {
      case 3:
        txt = monthNumToName(int.month);
        lbl.css({
          marginTop: -20,
          fontSize: 9,
          fontWeight: 'bold'
        });
        break;
      case 2:
        txt = 'Mon ' + int.date;
        break;
      case 1:
        return null;
    }
    return lbl.text(txt);
  };

  drawInMarkers = function(spine, intervals) {
    var assignCSS, buffer, i, int, lbl, mrk, pctPerInterval, pos, utils, _i, _len, _results;
    assignCSS = function(int) {
      switch (int.priority) {
        case 3:
          return {
            w: 3,
            h: 19,
            c: 'black'
          };
        case 2:
          return {
            w: 2,
            h: 11,
            c: 'black'
          };
        case 1:
          return {
            w: 1,
            h: 5,
            c: 'black'
          };
      }
    };
    utils = getUtils(getContainer(spine));
    buffer = utils.markerLeftBuffer;
    pctPerInterval = (100 - buffer) / (intervals.length - 1);
    _results = [];
    for (i = _i = 0, _len = intervals.length; _i < _len; i = ++_i) {
      int = intervals[i];
      pos = 3 + i * pctPerInterval + '%';
      (mrk = makeMarker(assignCSS(int))).css({
        left: pos
      });
      spine.append(mrk);
      animateMarker(mrk);
      lbl = buildLabel(int);
      if (lbl != null) {
        _results.push(spine.append(lbl.css('left', pos)));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  createEmptyTimeline = function(startDate, endDate, interval, jQueryObject) {};

  createTimelineWithMoments = function(startDate, endDate, interval, jQueryObject, moments) {};

  createMomentAtTimeline = function(moment, jQueryTimeline) {};

  insertMomentsIntoTimeline = function(moments, jQueryTimeline) {};

  printCurrentContainerData = function(container) {
    return console.log(getUtils(container).toString());
  };

  shootMarkerByDate = function(d, container) {
    var spine;
    spine = container.find('.spine').eq(0);
    return $(document.createElement('div')).css({
      left: getUtils(container).dateToMarkerLeft(parseDate('2013-02-01')),
      position: 'absolute',
      backgroundColor: 'black',
      height: 30,
      width: 1,
      marginTop: -15
    }).appendTo(spine);
  };

  runTests = function(container) {
    console.log('Printing current container information...\n');
    printCurrentContainerData(container);
    console.log('Test selecting date 2013-03-01...');
    return shootMarkerByDate('2013-03-01', container);
  };

  $(function() {
    var container, intervals, spine, testEnd, testStart, _ref;
    _ref = ['2013-01-07', '2013-03-22'], testStart = _ref[0], testEnd = _ref[1];
    container = createTimelineContainer($('#container'));
    setContainerData(container, parseDate(testStart), parseDate(testEnd), 3);
    intervals = produceIntervals(testStart, testEnd, 'day');
    drawInMarkers((spine = drawTimelineSpine(container)), intervals);
    return drawTimelineOriginCircle(spine);
  });

}).call(this);
